package Problems.String;

/**
 * Created by Alestar on 3/17/2019.
 *
 * Find the n’th term in Look-and-say (Or Count and Say) Sequence. The look-and-say sequence is the sequence of below integers:
 * 1, 11, 21, 1211, 111221, 312211, 13112221, 1113213211, …
 * How is above sequence generated?
 * n’th term in generated by reading (n-1)’th term.
 *
 * The first term is "1"
 *
 * Second term is "11", generated by reading first term as "One 1"
 * (There is one 1 in previous term)
 *
 * Third term is "21", generated by reading second term as "Two 1"
 *
 * Fourth term is "1211", generated by reading third term as "One 2 One 1" and so on ...
 *
 */
public class LookAndSaySequence {

    // Returns n'th term in
    // look-and-say sequence
    static String countAndSayFor(int n){
        // Base cases
        if (n == 1)     return "1";
        if (n == 2)     return "11";

        // Find n'th term by generating
        // all terms from 3 to n-1.
        // Every term is generated
        // using previous term

        // Initialize previous term
        String str = "11";
        for (int i = 3; i <= n; i++)
        {
            // In below for loop, previous
            // character is processed in
            // current iteration. That is
            // why a dummy character is
            // added to make sure that loop
            // runs one extra iteration.
            str += '$';
            int len = str.length();

            int cnt = 1; // Initialize count of matching chars
            String tmp = ""; // Initialize i'th term in series
            char []arr = str.toCharArray();
            System.out.println("current 'tmp' = " + tmp);

            // Process previous term
            // to find the next term
            for (int j = 1; j < len; j++)
            {
                // If current character does't match
                System.out.println("current 'j' = " + j);
                if (arr[j] != arr[j - 1])
                {
                    // Append count of str[j-1] to temp
                    tmp += cnt + 0;
                    System.out.println("current 'tmp' after add 'cnt' = " + tmp);

                    // Append str[j-1]
                    tmp += arr[j - 1];
                    System.out.println("current 'tmp' after append 'str[j-1]' = " + tmp);

                    // Reset count
                    cnt = 1;
                }

                // If matches, then increment count of matching characters
                else cnt++;
                System.out.println("current 'cnt' = " + cnt);
            }

            // Update str
            str = tmp;
        }

        return str;
    }

    static String countAndSayWhile(int n) {
        if (n <= 0)
            return null;

        String result = "1";
        int i = 1;

        while (i < n) {
            StringBuilder sb = new StringBuilder();
            int count = 1;
            for (int j = 1; j < result.length(); j++) {
                if (result.charAt(j) == result.charAt(j - 1)) {
                    count++;
                } else {
                    sb.append(count);
                    sb.append(result.charAt(j - 1));
                    count = 1;
                }
            }

            sb.append(count);
            sb.append(result.charAt(result.length() - 1));
            result = sb.toString();
            i++;
        }

        return result;
    }

    // Driver Code
    public static void main(String[] args){
        int N = 5;
        System.out.println("Input N = " + N );
        System.out.println("Count say using for loops = " + countAndSayFor(N));
        System.out.println("Count say using while loops= " + countAndSayWhile(N));
    }
}
